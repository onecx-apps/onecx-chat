# mychart/templates/post-install-hook.yaml
{{- if .Values.hooks.postInstall.enabled }}
apiVersion: batch/v1
kind: Job
metadata:
  name: "{{ .Release.Name }}-post-install-hook"
  namespace: "{{ .Release.Namespace }}"
  annotations:
    "helm.sh/hook": "post-install"
    "helm.sh/hook-delete-policy": before-hook-creation
spec:
  template:
    spec:
      serviceAccountName: {{ include "ollama.serviceAccountName" . }}
      containers:
        - name: update-route53
          image: amazon/aws-cli
          imagePullPolicy: Always
          command: ["/bin/bash", "-c"]
          args:
            - |
              
              # Install AWS CLI using curl
              curl -O "https://s3.us-west-2.amazonaws.com/amazon-eks/1.28.3/2023-11-02/bin/linux/amd64/kubectl" \
              && chmod +x ./kubectl \
              && mv ./kubectl /usr/local/bin/kubectl

              HOSTED_ZONE_ID={{ .Values.hooks.hostedZoneId }}
              RECORD_SET_NAME={{ .Values.hooks.recordSetName }}
              NAMESPACE={{ .Values.hooks.namespace }}
              RELEASE_NAME={{ .Values.hooks.releaseName }}
              REGION={{ .Values.hooks.region }}
              LB_HOSTED_ZONE_ID={{ .Values.hooks.loadBalancerHostedZoneId }}
              ACM_CERTIFICATE_ARN={{ .Values.hooks.acmCertificateArn }}
              
              # Fetch the Load Balancer IP
              attempt=0
              while [ $attempt -lt 5 ]; do
                LOAD_BALANCER_HOSTNAME=$(kubectl get services -n $NAMESPACE $RELEASE_NAME -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')

                # Check if the IP is not empty
                if [ -n "$LOAD_BALANCER_HOSTNAME" ]; then
                  echo "Load Balancer Hostname: $LOAD_BALANCER_HOSTNAME"
                  break  # Exit the loop if successful
                else
                  echo "Attempt $((attempt + 1)): Failed to retrieve Load Balancer HOSTNAME."
                  attempt=$((attempt + 1))
                  sleep 10  # Sleep for 10 seconds before the next attempt
                fi
              done

              # If after 5 attempts it's still not available, exit with an error message
              if [ -z "$LOAD_BALANCER_HOSTNAME" ]; then
                echo "Error: Maximum attempts reached. Failed to retrieve Load Balancer HOSTNAME."
                exit 1
              fi              

              # Fetch the Load Balancer IP
              LOAD_BALANCER_HOSTNAME=$(kubectl get services -n $NAMESPACE $RELEASE_NAME -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
              LOAD_BALANCER_NAME=$(aws elb describe-load-balancers --query "LoadBalancerDescriptions[?DNSName=='$LOAD_BALANCER_HOSTNAME'].LoadBalancerName" --output text)
              INSTANCE_PORT=$(aws elb describe-load-balancers --query "LoadBalancerDescriptions[?DNSName=='$LOAD_BALANCER_HOSTNAME'].ListenerDescriptions[0].Listener.InstancePort" --output text)

              # Check if the IP is not empty
              if [ -n "$LOAD_BALANCER_HOSTNAME" ]; then
                echo "Load Balancer Hostname: $LOAD_BALANCER_HOSTNAME"
                echo "Load Balancer name: $LOAD_BALANCER_NAME"

                aws elb delete-load-balancer-listeners --load-balancer-name $LOAD_BALANCER_NAME --load-balancer-ports {"80","443"}
                aws elb create-load-balancer-listeners --load-balancer-name $LOAD_BALANCER_NAME --listeners Protocol=HTTPS,LoadBalancerPort=443,InstanceProtocol=HTTP,InstancePort=$INSTANCE_PORT,SSLCertificateId=$ACM_CERTIFICATE_ARN
                
                # Update Route 53 record set
                aws route53 change-resource-record-sets \
                  --hosted-zone-id $HOSTED_ZONE_ID \
                  --region $REGION \
                  --change-batch "{\"Changes\": [{\"Action\": \"UPSERT\",\"ResourceRecordSet\": {\"Name\": \"$RECORD_SET_NAME\",\"Type\": \"A\",\"AliasTarget\": {\"DNSName\": \"$LOAD_BALANCER_HOSTNAME\",\"EvaluateTargetHealth\": false, \"HostedZoneId\": \"$LB_HOSTED_ZONE_ID\"}}}]}"
              fi

              exit 0

      restartPolicy: OnFailure
{{- end }}
